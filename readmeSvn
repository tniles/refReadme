
SubVersioN source control management

NOTE: do not install cygwin's svn if you intend to use tortoise svn. There are reportedly
some ways around this without conflict for ver. 1.7 and higher, but it might not be worth the
headache.
Experiment: install cygwin's svn and uninstall tortoise's command line tools.
    Results! Cygwin's svn works just fine if tortoise's cli tools are uninstalled (didn't
    bother trying with both installed). The key blocking issue was the "SVN_SSH" windows var
    which cygwin was reading. Exporting this in bash to "ssh -q" made svn+ssh work.
    NOTE: I found the IDE we were using (IAR) had some sort of svn integration in the project
    and complained about not being able to find "svn.exe". Re-installing the tortoise command
    line tools resolved these complaints.


# SVN GENERAL DESCRIPTION #

Centralized repo, usually accessible by a server url. 
"Trunk" holds the "main" or "master" copy of the code. 
"Branches" are snapshots, a copy of trunk's contents at the time of branch creation.
    Branches can be updated with merges from trunk.
"Tags" are snapshots, a *named* copy of trunk's contents at the time of tag creation.
"Working copy" is a copy of the repo's contents, held locally on your machine.
    A set of files is "checked out" from a central repo into a local working copy.
    A set of changed files is "checked in" to a central repo from a local working copy.


Repo URLs generally look like this:
    svn+ssh://user@server/path/to/centralized/repo
And to get a copy of the repo:
    svn co svn+ssh://user@server/path/to/centralized/repo


# COMMON COMMANDS #

"Help": use 'svn help cmd' to see svn's detailed help on <cmd>.
    - Use 'svn help' to see a list of commands and their abbreviations.

"Log" to see the commit log. Note: requires a connection to the repo.
    - 'svn help log' has some good examples
    - Use '-v' to list files changed by a given commit

"Status" shows information about changes, etc. since the last co/update. See 'svn help
status' for legend and details.
    'svn status -u' will show items which will be updated if 'svn update' is executed.
    'svn status --show-updates is the same thing.
        Do the revision numbers seem too far apart? Remember, it may be that you are working
        in a co'd subset of the repo. So, although you're not aware of changes in the trunk
        you're working in, a trunk elsewhere in the file hierarchy likely is responsible for
        these changes. One way to track these down:
            svn diff -r(M-1):M ^/         # the key here being the repo URL, ^/

"Checkout/co" get content from the remote repo into a local working copy.
    - Recursive by default
    - See "svn help co" for details on specifying multiple repos

"Commit/ci" place content into the remote repo from a local working copy.
    - Commits are atomic
    - Changes are first added/staged to the (pending) "change list"
    - Use the -m switch to include "commit message"; otherwise editor will open

"Update" to pull newer content from the repo into the private working copy (updates the wc
with other developer's changes which have been committed to the repo since the last update/co
of the working copy).
    - NOTE: to rollback to a previous revision of the repo, pass the -r switch to update.

"Add"/"Delete": add/delete files or dirs in the working copy. No changes made to the repo
until commit/checkin/ci. "Rename" and "move" have similar behavior.

"Revert" to undo all changes/wip to the files specified in the working copy.

"Cleanup" if anything is ever funky (e.g. deleted a file via 'rm' instead of 'svn rm', or if
working copy is out of sync with reality). Followed by an "update" and everything should be
back to normal.

"Info" to see some basic meta data concerning the repo.

"Create" for making a new centralized repo.
    - 'svnadmin create newRepoName'
    - XXX - more to come...


# DIFF AND MERGE (RESOLVING CONFLICTS) #

"Diff" to view diff between most recent two versions of the file specified.
    $ svn diff -r HEAD filename        # changes in repository
    $ svn diff -r PREV:BASE filename   # most recent change
    $ svn diff -r 343:344 http://svn.example.com/repos/calc/trunk
    $ svn diff -r 323:344 filename     # changes between r323 and r344
    $ svn diff -r 323 filename         # changes between r323 and working copy

        HEAD = latest in repo
        BASE = base revision of item's working copy
        PREV = revision just before COMMITTED
        COMMITTED = last commit at or before BASE

"Merge" to attempt an automatic merge.

Configure and use external merge tools. 
    SVN's internal merge tool is notoriously difficult to use and hence error prone. 
    Edit ~/.subversion/config by specifying the merge-tool-cmd, e.g.
        merge-tool-cmd = kdiff3Helper
    Create a script kdiff3Helper script and place it in your ~/bin with appropriate perms.
        #!/bin/bash
        kdiff3 "$1" "$2" "$3" -o "$4"
    Now when you run 'svn merge' choose option "l" (that's "L") to launch an external tool.
    When finished resolving any conflicts, choose option "r" to mark the file as resolved.

"Resolve" to mark a previously conflicted file as having been resolved. Poor little file.
    - e.g. svn resolve --accept=working fileName


# BRANCHING #

Creating a Branch: from the root level of the working copy, do:
    $ ls
        branches tags trunk
    $ svn copy trunk branches/myFeature
        A     branches/myFeature
    $ svn status
        A  +  branches/myFeature
    $ svn commit -m "feature branch"
        Adding branches/myFeature   
        Adding [...]

    NOTE: this operation should work even with modified files in trunk (i.e. they will carry
    over to the new branch).


# KEEPING BRANCHES UP-TO-DATE WITH TRUNK #

Branch management in svn can be painful if the branch is not kept up to date with the trunk as
trunk progresses. The basic procedure is described here:

- Optionally make a backup of your svn dir on disk
- Make sure all working copy work is checked in (both branch and trunk), e.g. a clean status
  - Otherwise, you will be checking in work-in-progress on your branch
- cd featureBranch
- Check "svn status". It should be the same now and when done with this process.
- "svn update" the trunk
- "svn update" the branch
- "svn merge /path/to/trunk"        ... alternatively, with svn shortcut: "svn merge ^/trunk"
- Resolve any conflicts
- "svn ci"
- Check "svn status". It should be the same now as it was prior to this process.


# MERGING FEATURE BRANCH TO TRUNK #

If the branch has tracked trunk well, then you should only need to 1) update the branch one
last time with trunk, and then 2) merge the branch back into trunk. Status should be
clean/consistent before and after.

Whole branch:

- cd trunk
- "svn merge /path/to/featureBranch"          # --reintegrate switch deprecated after 1.7ish
- "svn ci"

Single file:

    /** TL;DR **/
    This is generally a bad idea. See below for details.
    So, although you lose the full history from branch commits (may be negligible anyways),
    the easiest thing to do is to make sure you have trunk's latest changes and your latest
    changes incorporated into the file(s) and then do a system command 'cp' and overwrite the
    file. Commit it and you're all done. Icky, but that seems to be the quick and dirty way.
    Cherry-picking may be an option, but then you may have some of the issues described below.
    /** TL;DR **/

    See http://stackoverflow.com/questions/12730180/is-it-safe-to-merge-individual-files-between-branches-in-svn?lq=1
    for details. The issue revolves around what SVN is apt to do with the svn:mergeinfo
    property of the files and directories in the repo. Later, when reintegrating a branch, you
    may see many more files as having been changed than just the few single files you
    initially merged. 
    This is one reason why whole branch merges are generally preferred.


# BRANCH OF A BRANCH (OR TAG) #

svn copy /proj/path/to/tagXyz /proj/path/to/myBranchFromTagXyz


# COMPARING BRANCHES #

To ls files with differences, pass the "--summarize" switch.

svn diff ^/svnpath/to/trunk ^/svnpath/to/branch
  -or-
svn diff ^/svnpath/to/branch1 ^/svnpath/to/branch2


# MISCELLANEOUS #

In general, 'svn' commands are safe. 'svnadmin' commands can be dangerous without knowledge of
the svn internals.

Use 'svn ls' and 'svnlook' to inspect repos without performing a checkout.
    Note: the caret ^ is a shorthand for the beginning of the repo's relative server path.
    That is, 'svninfo' will show you exactly where this points. Can be useful when combined
    with 'svn ls' within an already checked out repo.

To remove a local/working copy, simply delete it from the filesystem.

Set executable bit on a file:
    svn propset svn:executable ON script.sh


# IGNORING FILES #

Use "svn status --no-ignore" to view effective changes.

Using file .svnignore:
    Populate the file with patterns, one line at a time. Save.
    svn propset svn:ignore -F .svnignore .    # Could use -R, but be careful! Probably more
                                              # changes than you want.
    Add .svnignore and ci

Command line:
    Ignoring files (from current dir):
        svn propset svn:ignore "bin" .
        -or-
        svn propset svn:ignore "file1
        file2
        file3" dirName

    Undo ignore (invokes editor):
        svn propedit svn:ignore .

NOTES:
- If you use the -R switch and find you've touched too many files, use the -R switch again 
  with the "revert" command to undo the damage.
- SVN will not ignore anything already under version control. So, "svn delete" first, then try
  to ignore it.

