
SubVersioN source control management

NOTE: do not install cygwin's svn if you intend to use tortoise svn. There are reportedly
some ways around this without conflict for ver. 1.7 and higher, but it might not be worth the
headache.
Experiment: install cygwin's svn and uninstall tortoise's command line tools.
    Results! Cygwin's svn works just fine if tortoise's cli tools are uninstalled (didn't
    bother trying with both installed). The key blocking issue was the "SVN_SSH" windows var
    which cygwin was reading. Exporting this in bash to "ssh -q" made svn+ssh work.
    NOTE: I found the IDE we were using (IAR) had some sort of svn integration in the project
    and complained about not being able to find "svn.exe". Re-installing the tortoise command
    line tools resolved these complaints.


# SVN GENERAL DESCRIPTION #

Centralized repo, usually accessible by a server url. 
"Trunk" holds the "main" or "master" copy of the code. 
"Branches" are snapshots, a copy of trunk's contents at the time of branch creation.
"Tags" are snapshots, a *named* copy of trunk's contents at the time of tag creation.
"Working copy" is a copy of the repo's contents, held locally on your machine.
    A set of files is "checked out" from a central repo into a local working copy.
    A set of changed files is "checked in" to a central repo from a local working copy.


Repo URLs generally look like this:
    svn+ssh://user@server/path/to/centralized/repo
And to get a copy of the repo:
    svn co svn+ssh://user@server/path/to/centralized/repo


# COMMON COMMANDS #

"Help": use 'svn help cmd' to see svn's detailed help on <cmd>.
    - Use 'svn help' to see a list of commands and their abbreviations.

"Status" shows information about changes, etc. since the last co/update. See 'svn help
status' for legend and details.

"Checkout/co" get content from the remote repo into a local working copy.
    - Recursive by default
    - See "svn help co" for details on specifying multiple repos

"Commit/ci" place content into the remote repo from a local working copy.
    - Commits are atomic
    - Changes are first added/staged to the (pending) "change list"
    - Use the -m switch to include "commit message"; otherwise editor will open

"Update" to pull newer content from the repo into the private working copy (updates the wc
with other developer's changes which have been committed to the repo since the last update/co
of the working copy).

"Add"/"Delete": add/delete files or dirs in the working copy. No changes made to the repo
until commit/checkin/ci. "Rename" and "move" have similar behavior.

"Revert" to undo all changes/wip to the files specified in the working copy.

"Log" to see the commit log. Note: requires a connection to the repo.
    - 'svn help log' has some good examples

"Info" to see some basic meta data concerning the repo.

"Create" for making a new centralized repo.


# RESOLVING CONFLICTS (DIFF AND MERGE) #

"Diff" to view diff between most recent two versions of the file specified.
    $ svn diff -rHEAD filename        # changes in repository
    $ svn diff -rPREV:BASE filename   # most recent change
    $ svn diff -r 343:344 http://svn.example.com/repos/calc/trunk

"Merge" to attempt an automatic merge.

"Resolve" to mark a previously conflicted file as having been resolved. Poor little file.
    - e.g. svn resolve --accept=working fileName


# BRANCHING #

Creating a Branch: from the root level of the working copy, do:
    $ ls
        branches tags trunk
    $ svn copy trunk branches/myFeature
        A     branches/myFeature
    $ svn status
        A  +  branches/myFeature
    $ svn commit -m "feature branch"
        Adding branches/myFeature   
        Adding [...]


# KEEPING BRANCHES UP-TO-DATE WITH TRUNK #

Branch management in svn can be painful if the branch is not kept up to date with the trunk as
trunk progresses. The basic procedure is described here:

- Make sure all working copy work is checked in (both branch and trunk)
- cd featureBranch
- Check "svn status". It should be the same now and when done with this process.
- "svn update" the trunk
- "svn update" the branch
- "svn merge /path/to/trunk"
- Resolve any conflicts
- "svn ci"
- Check "svn status". It should be the same now as it was prior to this process.


# MERGING FEATURE BRANCH TO TRUNK #

If the branch has tracked trunk well, then you should only need to 1) update the branch one
last time with trunk, and then 2) merge the branch back into trunk. Status should be
clean/consistent before and after.

- cd trunk
- "svn merge --reintegrate /path/to/featureBranch"
- "svn ci"


# MISCELLANEOUS #

In general, 'svn' commands are safe. 'svnadmin' commands can be dangerous without knowledge of
the svn internals.

Use 'svn ls' and 'svnlook' to inspect repos without performing a checkout.

To remove a local/working copy, simply delete it from the filesystem.


# IGNORING FILES #

Use "svn status --no-ignore" to view effective changes.

Using file .svnignore:
    Populate the file with patterns, one line at a time. Save.
    svn propset svn:ignore -F .svnignore .    # Could use -R, but be careful! Probably more
                                              # changes than you want.
    Add .svnignore and ci

Command line:
    Ignoring files (from current dir):
        svn propset svn:ignore "bin" .
        -or-
        svn propset svn:ignore "file1
        file2
        file3" dirName

    Undo ignore (invokes editor):
        svn propedit svn:ignore .

NOTES:
- If you use the -R switch and find you've touched too many files, use the -R switch again 
  with the "revert" command to undo the damage.
- SVN will not ignore anything already under version control. So, "svn delete first", then try
  to ignore it.

