= Quick Start =

An introduction for the impatient.

<<TableOfContents>>

== Setting a username ==

The first thing you should do is set the username Mercurial will use for commits. It's best to
configure a proper email address in ''`~/.hgrc`'' (or on a Windows system in 
''`%USERPROFILE%\Mercurial.ini`'') by creating it and adding lines like the following:

{{{
    [ui]
    username = John Doe <john@example.com>
}}}

== Working on an existing Mercurial project ==

If you have a URL to a browsable project [[Repository|repository]] (for example 
[[http://selenic.com/hg]]), you can grab a copy like so:

{{{
    $ hg clone http://selenic.com/hg mercurial-repo
    real URL is http://www.selenic.com/hg/
    requesting all changes
    adding changesets
    adding manifests
    adding file changes
    added 9633 changesets with 19124 changes to 1271 files
    updating to branch default
    1084 files updated, 0 files merged, 0 files removed, 0 files unresolved
}}}

This will create a new directory called ''`mercurial-repo`'', grab the complete project 
history, and check out the most recent [[ChangeSet|changeset]] on the default branch.

The '`summary`' command  will summarize the state of the
    [[WorkingDirectory|working directory]]
Command names may be abbreviated, so entering just '`hg sum`' is enough:

{{{
    $ hg sum
    parent: 9632:16698d87ad20 tip
     util: use sys.argv[0] if $HG is unset and 'hg' is not in PATH
     branch: default
     commit: (clean)
     update: (current)
}}}

Here {{{commit: (clean)}}} means that there no [[LocalModifications|local changes]],
{{{update: (current)}}} means that the checked out files (in the working directory) are 
updated to the newest revision in the repository.

== Setting up a new Mercurial project ==

You'll want to start by creating a repository in the directory containing your project:

{{{
    $ cd project/
    $ hg init           # creates .hg
}}}

Mercurial will look for a file named ''`.hgignore`'' in the root of your repository which 
contains a set of glob patterns and regular expressions to ignore in file paths. Here's an 
example ''`.hgignore`'' file:

{{{
    syntax: glob
    *.orig
    *.rej
    *~
    *.o
    tests/*.err

    syntax: regexp
    .*\#.*\#$
}}}

Test your ''`.hgignore`'' file with '`status`':
{{{
    $ hg status         # show all non-ignored files
}}}

This will list all files that are not ignored with a '?' flag (not tracked). Edit your 
'`.hgignore`' file until only files you want to track are listed by status. You'll want to 
track your .hgignore file too! But you'll probably not want to track files generated by your 
build process. Once you're satisfied, schedule your files to be added, then commit:

{{{  
    $ hg add            # add those 'unknown' files
    $ hg commit         # commit all changes into a new changeset, edit changelog entry
    $ hg parents        # see the currently checked out revision (or changeset)
}}}

To get help on commands, simply run:

{{{
    $ hg help
}}}

== Clone, commit, merge ==

{{{
    $ hg clone project project-work    # clone repository
    $ cd project-work
    $ <make changes>
    $ hg commit
    $ cd ../project
    $ <make other changes>
    $ hg commit
    $ hg pull ../project-work   # pull changesets from project-work
    $ hg merge                # merge the new tip from project-work into our working directory
    $ hg parents          # see the revisions that have been merged into the working directory
    $ hg commit           # commit the result of the merge
}}}

== Exporting a patch ==

{{{
    (make changes)
    $ hg commit
    $ hg export tip    # export the most recent commit
}}}

== Network support ==

{{{
# clone from the primary Mercurial repo
    # $ hg clone http://selenic.com/hg/
    # $ cd hg
    #
    # # pull new changesets from an existing other repo into the repository (.hg)
    # $ hg pull http://selenic.com/hg/
    #
    # # export your current repo via HTTP with browsable interface on port 8000
    # $ hg serve -n "My repo"
    #
    # # push changesets to a remote repo with SSH
    # $ hg push ssh://user@example.com/hg/
}}}

